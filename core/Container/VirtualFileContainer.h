/*
  * Generated by cppsrc.sh
  * On 2015-12-27 21:51:19,30
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef VirtualFileContainer_H
#define VirtualFileContainer_H

namespace StarVFS {
namespace Containers {

class VirtualFileInterface {
public:
	VirtualFileInterface();
	virtual ~VirtualFileInterface();

	virtual FileSize GetSize() const { return 0; }

	virtual bool ReadFile(CharTable &out, FileSize *DataSize) const = 0;
	//write
};

using SharedVirtualFileInterface = std::shared_ptr<VirtualFileInterface>;
using WeakVirtualFileInterface = std::weak_ptr<VirtualFileInterface>;

class VirtualFileContainer : public iContainer {
public:
	VirtualFileContainer(FileTableInterface *fti);
 	virtual ~VirtualFileContainer();

	/** Container does not own registered files. */
	bool RegisterFile(SharedVirtualFileInterface SharedFile, const String& Path, bool ForcePath = false);
	/** Container DO own added files. */
	bool AddFile(SharedVirtualFileInterface SharedFile, const String& Path, bool ForcePath = false);
	/** Drop ownership of file. Has effect only on added files. */
	bool DropFile(SharedVirtualFileInterface SharedFile);

	virtual FileID GetFileCount() const override;
	virtual bool ReloadContainer() override;
	virtual bool RegisterContent() const override;

	virtual bool GetFileData(FileID ContainerFID, CharTable &out, FileSize *DataSize) const override;

	virtual const String& GetFileName() const override { return ""; }
	virtual RWMode GetRWMode() const override { return RWMode::None; };
private: 
	struct FileInfo {
		FileID m_InternalID;
		FileID m_GlobalID;
		WeakVirtualFileInterface m_WeakPtr;
		SharedVirtualFileInterface m_SharedPtr;
		String m_FullPath;
	};
	std::vector<FileInfo> m_Files;
	FileID m_InternalIDCounter;
};

} //namespace Containers 
} //namespace StarVFS 

#endif
