/*
  * Generated by cppsrc.sh
  * On 2015-12-10 19:39:52,96
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef FolderContainer_H
#define FolderContainer_H
#ifndef STARVFS_DISABLE_FOLDERCONTAINER
namespace StarVFS {
namespace Containers {

class FolderContainer : public iContainer {
public:
	FolderContainer(const String &Path, unsigned Flags = 0);
	virtual ~FolderContainer();

	virtual bool ReloadContainer() override;

	virtual FileID GetFileCount() const override;
	virtual bool RegisterFiles(FileTable *table) const override;

	virtual const String& GetFileName() const override;

	virtual RWMode GetRWMode() const override;

	virtual bool GetFileData(FileID ContainerFID, CharTable &out, FileSize *DataSize) const override;

//	virtual FileReader GetFileReader(const string& file) const override;
//	virtual FileReader GetFileReader(const RawFilePointer *file) const override;
//	virtual FileWritter GetFileWritter(const string& file) override;
//	virtual FileWritter GetFileWritter(const RawFilePointer *filee) override;

//	virtual bool FileExists(const string& file) const override;

//	virtual const string& GetFileName() const override;

//	virtual bool EnumerateFolder(const RawFilePointer *root, FolderEnumerateFunc func) const override;
private:
	enum class FileType {
		File, Directory,
	};

	struct Entry {
		FileType m_Type;
		String m_FullPath;
		String m_SubPath;
	};

	template <class T> static bool EnumerateFolder(const String &Path, const String& BaseSubPath, T func);

	String m_Path;

	std::vector<Entry> m_FileEntry;

//	string FullPath(const string &sub) const
//	{
//		return m_Path + sub;
//	}

//	mutable std::list<std::unique_ptr<FolderContainerPointer>> m_PtrList;
//	mutable std::unordered_map<string, FolderContainerPointer*> m_PtrMap;
};

} //namespace Containers 
} //namespace StarVFS 

#endif
#endif
