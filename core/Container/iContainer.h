/*
  * Generated by cppsrc.sh
  * On 2015-12-10 18:06:02,09
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef iContainer_H
#define iContainer_H

#include "../StarVFSInternal.h"
#include "FileTableInterface.h"

namespace StarVFS {
namespace Containers {

class iContainer {
public:
 	explicit iContainer(FileTableInterface  *fti);
 	virtual ~iContainer();

	virtual bool Initialize() { return true; }
	virtual bool Finalize() { return true; }

	/** Reload container internal file table */
	virtual bool ReloadContainer() = 0;
	/** TBD */
	virtual bool RegisterContent() const = 0;

	/** Get total number of files in container. Folders shall be counted. All children shall have bigger id than parent. */
	virtual FileID GetFileCount() const = 0;
	/** Retrieve info about all file in container. */

	/** Get string which may be used to reopen container (filename, base path or ip address) */
	virtual String GetContainerURI() const = 0;
	virtual RWMode GetRWMode() const = 0;

	ContainerID GetContainerID() const { return GetFileTableInterface()->GetContainerID(); }

	/** Find file in container. ContainerFileName shall be relative to container. Function is slow. */
	virtual FileID FindFile(const String& ContainerFileName) const = 0;

	/** Container shall not do any buffering. */
	virtual bool GetFileData(FileID ContainerFID, ByteTable &out) const = 0;
//	virtual bool SetFileData(FileID ContainerFID, const ByteTable &in, FileSize DataSize) const = 0;

	static bool CanOpen(const String&) { return false; }
	static CreateContainerResult CreateFor(StarVFS *svfs, const String& MountPoint, const String& Location) { return CreateContainerResult(VFSErrorCode::InternalError, nullptr); }
protected:
	FileTableInterface* GetFileTableInterface() { return m_FTI; }
	FileTableInterface* GetFileTableInterface() const { return m_FTI; }
private: 
	FileTableInterface *m_FTI;
};

} //namespace Containers 
} //namespace StarVFS 

#endif

