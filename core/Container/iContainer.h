/*
  * Generated by cppsrc.sh
  * On 2015-12-10 18:06:02,09
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef iContainer_H
#define iContainer_H

namespace StarVFS {

class iContainer {
public:
 	iContainer(FileTableInterface  *fti);
 	virtual ~iContainer();

	/** Reload container internal file table */
	virtual bool ReloadContainer() = 0;

	/** Get total number of files in container. Folders shall be counted. All children shall have bigger id than parent. */
	virtual FileID GetFileCount() const = 0;
	/** Retrive info about all file in container. */

	virtual bool RegisterFiles(FileTable *table) const = 0;

	virtual const String& GetFileName() const = 0;
	virtual RWMode GetRWMode() const = 0;

	FileTableInterface* GetFileTableInterface() { return m_FTI; }
	const FileTableInterface* GetFileTableInterface() const { return m_FTI; }

	/** Container shall not do any buffering. */
	virtual bool GetFileData(FileID ContainerFID, CharTable &out, FileSize *DataSize = nullptr) const = 0;
//	virtual bool SetFileData(FileID ContainerFID, const CharTable &in, FileSize DataSize) const = 0;

	//alloc file

	//virtual bool GetFileSize(FileID ContainerFileID, FileSize &Size) const = 0;
//	/** Get file reader. Returns nullptr if file cannot be read */
//	virtual FileReader GetFileReader(const string& file) const;
//	/** Get file reader. Returns nullptr if file cannot be read */
//	virtual FileReader GetFileReader(const RawFilePointer *file) const;
//	/** Get file writter. Returns nullptr if file cannto be written */
//	virtual FileWritter GetFileWritter(const string& file);
//	/** Get file writter. Returns nullptr if file cannto be written */
//	virtual FileWritter GetFileWritter(const RawFilePointer *file);
//
//	/** Returns true if file or directory exists. */
//	virtual bool FileExists(const string& file) const;
//
//	/** Get count of filed inside container. (Folders are not included)*/
//	virtual size_t FilesCount() const;
//	/** Get total container size. (without metadata) */
//	virtual size_t ContainerSize() const;
//
//	virtual const string& GetFileName() const;
//	virtual const string& GetContainerName() const;
//
//	enum class MetadataRetriveStatus {
//		Success,
//		FatalError,
//		InvalidIndex,
//		InvalidRequest,
//		ReadError,
//		InternalError,
//	};
//
//	//virtual MetadataRetriveStatus GetMetadataCount() const = 0;
//	//virtual MetadataRetriveStatus GetContainerMetadata(XMLFile &meta, unsigned MetadataIndex) const = 0;
//
//	/** Enumeratrion function used during folder content enumeration */
//	using FolderEnumerateFunc = std::function < void(const string &FileName, FileType type, const RawFilePointer *ptr) > ;
//
//	/** Enumerate content of directory by pointer. Returns false if Path is not valid folder. set root = nullptr to enumerate root */
//	virtual bool EnumerateFolder(const RawFilePointer *root, FolderEnumerateFunc func) const;
protected:
private: 
	FileTableInterface *m_FTI;
};

} //namespace StarVFS 

#endif

/*
	virtual container (each file is a set of functions)


*/