/*
  * Generated by cppsrc.sh
  * On 2016-01-01 18:40:09,38
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include "nRDC.h"
#include "Builder_v1.h"

namespace StarVFS {
namespace RDC {

using namespace Headers::Version_1;

struct Builder_v1::PrivateData {
	std::vector<SectionDescriptor> m_Sections;
	DataBlock m_SectionTableDataBlock;
};

Builder_v1::Builder_v1() {
	Reset();
}

Builder_v1::~Builder_v1() {
}

void Builder_v1::Reset() {
	m_Data = std::make_unique<PrivateData>();
}

//-----------------------------------------------------------------------------

bool Builder_v1::WriteSectionTable() {
	if (m_Data->m_Sections.empty() || m_Data->m_Sections.back().Type != Headers::SectionType::EmptyEntry) {
		m_Data->m_Sections.emplace_back();
		m_Data->m_Sections.back().Zero();
	}
	if (!WriteBlockAtEnd((char*)&m_Data->m_Sections[0], sizeof(m_Data->m_Sections[0]) * m_Data->m_Sections.size(), m_Data->m_SectionTableDataBlock)) {
		//todo: log
		return false;
	}
	return true;
}

bool Builder_v1::WriteFileFooter() {
	FileFooter footer;
	footer.SectionsBlock = m_Data->m_SectionTableDataBlock;
	footer.SectionCount = static_cast<SectionIndex>(m_Data->m_Sections.size());
	return GetDevice()->WriteAtEnd((char*)&footer, sizeof(footer));
}

//-----------------------------------------------------------------------------

bool Builder_v1::WriteBlockAtEnd(const char *data, Size size, DataBlock &blockdesc) {
	auto dev = GetDevice();
	if (!dev) {
		//todo: log
		return false;
	}

	blockdesc.FilePointer = static_cast<Size>(dev->GetSize());
	blockdesc.ContainerSize = size;

	if (!dev->WriteAtEnd(data, size))
		return false;

	return true;
}

} //namespace RDC 
} //namespace StarVFS 
