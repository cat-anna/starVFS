/*
  * Generated by cppsrc.sh
  * On 
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <iostream>
#include <sstream>
#include <memory>

#include "luainterface.h"

#include <main.lua.h>
#include <InstanceProxy.lua.h>
#include <cli.lua.h>
#include <console.lua.h>
#include <utils.lua.h>
#include <vfs.lua.h>
#include <help.lua.h>

static int Lua_print(lua_State *L, std::ostringstream &out) {
	for (int i = 1, n = lua_gettop(L); i <= n; i++) {
		switch (lua_type(L, i)) {
		case LUA_TNUMBER:
			out << lua_tonumber(L, i);
			break;
		case LUA_TSTRING: {
			const char *s = lua_tostring(L, i);
			out << (s ? s : "{NULL}");
			break;
		}
		case LUA_TBOOLEAN:
			out << ((lua_toboolean(L, i) != 0) ? "true" : "false");
			break;
		case LUA_TUSERDATA:
			out << "[USERDATA]";
			break;
		case LUA_TNIL:
			out << "[NULL]";
			break;
		case LUA_TFUNCTION:
			out << "[Function@" << lua_tocfunction(L, i) << "]";
			break;
		case LUA_TTABLE:
			out << "[TABLE]";
			break;
		default:
			out << "[?=" << lua_type(L, i) << "]";
			break;
		}
		out << " ";
	}
	return 0;
}

static int lua_Debug(lua_State *lua) {
	std::ostringstream out;
	out << "[DEBUG][LUA] ";
	Lua_print(lua, out);
	std::cout << out.str() << "\n";
	return 0;
}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

Lua::Lua() {
	m_Lua.reset(luaL_newstate());
	luaL_openlibs(GetState());
}

//-------------------------------------------------------------------------------------------------

bool Lua::Initialize() {

	luabridge::getGlobalNamespace(m_Lua.get())
		.addCFunction("debug", &lua_Debug)
	;

	auto L = m_Lua.get();

	auto load = [L](const char *data, unsigned len, const char *name) -> bool {
		int status = luaL_loadbuffer(L, data, len, name);  
		if(status) { 
			printf("Error: %s\n", lua_tostring(L, -1));
			lua_pop(L, 1);
			printf("Unable to load script %s\n", name);
			return false; 
		} 
		status = lua_pcall(L, 0, LUA_MULTRET, 0); 
		if(status) { 
			printf("Unable to execute script %s\n", name);
			return false; 
		} 
		return true;
	};

#define do_script(DATA, LEN, NAME) do { if (!load(DATA, LEN, NAME)) return false; } while(0)

	do_script((char*)utils_lua, utils_lua_size, "utils.lua");
	do_script((char*)help_lua, help_lua_size, "help.lua");

	do_script((char*)main_lua, main_lua_size, "main.lua");
	do_script((char*)InstanceProxy_lua, InstanceProxy_lua_size, "InstanceProxy.lua");
	do_script((char*)console_lua, console_lua_size, "console.lua");

	do_script((char*)cli_lua, cli_lua_size, "cli.lua");
	do_script((char*)vfs_lua, vfs_lua_size, "vfs.lua");

//	int status = luaL_loadbuffer(L, line, len, "=stdin");  /* try it */

	return true;
}
