/*
  * Generated by cppsrc.sh
  * On 
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef LuaVFS_H
#define LuaVFS_H

#include <iostream>
#include <memory>
#include "luainterface.h"

#include <core/nStarVFS.h>
#include <core/Module/RemoteModule.h>

class SVFS : public ::StarVFS::StarVFS {
public:
	SVFS(SharedLua Lua);
 	~SVFS();

	bool Initialize();

	void StartServer(int port) { LoadModule<::StarVFS::Modules::RemoteModule>(port); }
private:
	SharedLua m_Lua;

	int RawOpenContainer(const char *what, const char * where, unsigned Flags) {
		return (int)OpenContainer(what, where ? where : "/", Flags);
	}

	bool RawForcePath(const char* path) {
		return false;
	}

	::StarVFS::FileHandle RawOpenFile(const char* FileName, int ReadMode = (int)::StarVFS::RWMode::R, int FileMode = (int)::StarVFS::OpenMode::OpenExisting) {
		if (!FileName)
			return ::StarVFS::FileHandle();
		return OpenFile(FileName, (::StarVFS::RWMode)ReadMode, (::StarVFS::OpenMode)FileMode);
	}

	const char* RawGetFileName(int fid) { return GetFileName((::StarVFS::FileID)fid); }
	int RawIsFileDirectory(int fid) { return IsFileDirectory((::StarVFS::FileID)fid) ? 1 : 0; }
	
	void CoutDumpStructure() { DumpStructure(std::cout); }
	void CoutDumpFileTable() { DumpFileTable(std::cout); }

	int Export(const char *outfile, const char* vfsbase);

};

#endif
