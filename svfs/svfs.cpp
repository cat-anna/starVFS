/*
  * Generated by cppsrc.sh
  * On 
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include "svfs.h"
#include "luainterface.h"
#include "svfslua.h"

#include <SVFSRegister.h>

SVFS::SVFS(SharedLua Lua) {
	m_Lua = Lua;
}

SVFS::~SVFS() {
}

//-------------------------------------------------------------------------------------------------

int SVFS::Export(const char *outfile, const char* vfsbase) {
	STARVFSDebugLog("Export %s -> %s", vfsbase, outfile);

	auto exporter = CreateExporter<::StarVFS::Exporters::InternalExporter>();

	exporter->DoExport(vfsbase, outfile);

	return 0;
}

bool SVFS::Initialize() {
	if (!m_Lua) {
		return false;
	}

	svfslua::Install(m_Lua->GetState());

	luabridge::getGlobalNamespace(m_Lua->GetState())
		.beginNamespace("api")
			.beginClass<SVFS>("StarVFS")
				.addFunction("DumpStructure", &SVFS::CoutDumpStructure)
				.addFunction("DumpFileTable", &SVFS::CoutDumpFileTable)

				.addFunction("ForcePath", &SVFS::RawForcePath)

				.addFunction("OpenContainer", &SVFS::RawOpenContainer)
				.addFunction("OpenFile", &SVFS::RawOpenFile)

				.addFunction("GetFullFilePath", &SVFS::GetFullFilePath)
				.addFunction("GetFileName", &SVFS::RawGetFileName)
				.addFunction("GetFileSize", (int(SVFS::*)(int))&SVFS::GetFileSize)
				.addFunction("IsFileValid", (int(SVFS::*)(int))&SVFS::IsFileValid)
				.addFunction("IsFileDirectory", &SVFS::RawIsFileDirectory)
	//FileID FindFile(const String& FileName);

				.addFunction("GetModuleCount", &SVFS::GetModuleCount)
				.addFunction("GetModule", &SVFS::GetModule)

				.addFunction("Export", &SVFS::Export)
			.endClass() 
			 
		.endNamespace()
		;

	luabridge::getGlobalNamespace(m_Lua->GetState())
		.beginNamespace("inst")
			.addVariable<SVFS*>("svfs", this, false)
		.endNamespace()
		;

	return true;
}

//-------------------------------------------------------------------------------------------------
